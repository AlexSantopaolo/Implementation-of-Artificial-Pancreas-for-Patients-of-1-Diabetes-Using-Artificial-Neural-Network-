function [y1] = ml_cont(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Jun-2019 13:10:42.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 8xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.4;0.500893809231582;2.86744252046977;5.70445938232466;6.31338999135421;0.0482501360790728;0.00558818990917597;0.00281159495458799];
x1_step1.gain = [2.10087412483348;2.9106460778215;0.0773575160540515;0.147505710240648;0.1365744558646;72.2950052885061;182.639987090786;365.279974181571];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.39516688410303274503;1.1504035958880138857;0.38074200229574528542;1.4131937655691411138;0.89957579353427430391];
IW1_1 = [0.17426116832505564314 -1.0675924109969632259 -1.0271877230749524301 1.6087580916345567417 0.39622689855623899335 0.89939137313447348188 -0.16334881946960774779 -0.98389656241868561626;-0.44560270807485591327 -0.42497036164003665348 1.4585774197957019904 -0.32471978886952956866 -1.0797059760209148926 0.47818559896660667308 0.81120877060459983809 0.7673531328363255577;0.5850714083343552252 0.61900400071438244076 0.081587711322172379313 -1.4199826655754754778 -0.0010724774413049115163 -1.2504496380328962157 -0.14959067724716840209 -0.51993475909294573079;0.69523784492434625992 1.0599579918922676924 0.1039778836694973535 0.85228991200174297749 0.54168706796301668849 -0.35759223905192100146 -0.62055790904323404611 0.67795636876035847429;1.8342167306335750432 -0.065941656954912025723 0.097628792814839160386 -0.074720752739901363793 0.022970989384332340943 0.73625836244356701599 -0.48440476771160706493 0.68163315238916355465];

% Layer 2
b2 = -0.61714694362847000164;
LW2_1 = [-1.2885936283367276367 1.058205771246177207 0.18963972211092350317 -0.59470973990350162186 0.75975197388709114765];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.15358812529719;
y1_step1.xoffset = -4.05658523629144e-19;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
